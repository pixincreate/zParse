name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write # Only permission needed for releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Extract Release Notes
        id: release-notes
        run: |
          # Extract content between the latest version headers in CHANGELOG.md
          VERSION=${GITHUB_REF#refs/tags/}
          NOTES=$(awk -v ver="$VERSION" '
            /^## \[/ { if (p) { exit }; if ($2 == "['ver']") { p=1; next } }
            p { print }
          ' CHANGELOG.md)
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-release:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: zparse
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: zparse
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: zparse.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare Asset
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: release/${{ matrix.binary_name }}
          body_path: ${{ needs.create-release.outputs.NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
