name: CI-push

on:
  push:
    branches:
      - main
  merge_group:
    types:
      - checks_requested
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short

jobs:
  formatting:
    name: cargo-fmt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        shell: bash
        run: cargo +nightly fmt --all --check

  typos:
    name: spell-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Spell check
        uses: crate-ci/typos@master

  test:
    name: test-${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}

    env:
      RUSTFLAGS: "-D warnings"

    strategy:
      fail-fast: true
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - uses: Swatinem/rust-cache@v2.7.0
        with:
          save-if: ${{ github.event_name == 'push' }}

      # Skip fuzz tests on Windows
      - name: Run tests (debug)
        if: runner.os != 'Windows'
        run: cargo test --all-features --all-targets

      # Windows-specific test command
      - name: Run tests (debug) - Windows
        if: runner.os == 'Windows'
        run: cargo test --package zparse --all-features --all-targets

      - name: Run tests (release)
        if: runner.os != 'Windows'
        run: cargo test --release --all-features --all-targets

      - name: Run tests (release) - Windows
        if: runner.os == 'Windows'
        run: cargo test --package zparse --release --all-features --all-targets

      - name: Run Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings