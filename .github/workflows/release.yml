name: Release

on:
  push:
    tags: ["v*"]
    branches:
      - main

permissions:
  contents: write

env:
  PROJECT_NAME: "zparse"

jobs:
  pre-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check conditions for release
        id: check
        run: |
          # If this is a tag push
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            # Get the commit that this tag points to
            TAG_COMMIT=$(git rev-list -n 1 $TAG)

            # Fetch main branch to ensure it's available
            git fetch origin main:main

            # Check if this commit is on the main branch
            if git branch --contains $TAG_COMMIT | grep -q "main"; then
              echo "Tag $TAG is on main branch - proceeding with release"
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "Tag $TAG is not on main branch yet - skipping release"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not a tag push, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: pre-release
    if: needs.pre-release.outputs.should_release == 'true'
    name: release-${{ matrix.platform.asset_name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: linux
            arch: x86_64

          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: darwin
            arch: x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: darwin
            arch: aarch64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: windows
            arch: x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set binary name
        id: binary
        shell: bash
        run: |
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            echo "name=${{ env.PROJECT_NAME }}-${{ matrix.platform.asset_name }}-${{ matrix.platform.arch }}.exe" >> $GITHUB_OUTPUT
          else
            echo "name=${{ env.PROJECT_NAME }}-${{ matrix.platform.asset_name }}-${{ matrix.platform.arch }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract Release Notes
        id: release-notes
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          NOTES=$(awk -v ver="$VERSION" '
            /^## \[/ { if (p) { exit }; if ($2 == "['ver']") { p=1; next } }
            p { print }
          ' CHANGELOG.md)

          ADDITIONAL_INFO="

          ---

          See [\`README.md\`](./README.md) for information on how to install and use ${{ env.PROJECT_NAME }}.

          The downloads are digitally signed. Please consider [verifying the downloads](./README.md#verifying-downloads)."

          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "$ADDITIONAL_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      # Add cross-compilation support
      - name: Install cross-compilation tools
        if: matrix.platform.target == 'aarch64-apple-darwin'
        run: |
          brew install FiloSottile/musl-cross/musl-cross
          rustup target add aarch64-apple-darwin

      # Build the specific package
      - name: Build Binary
        run: |
          cargo build --release --target ${{ matrix.platform.target }} -p ${{ env.PROJECT_NAME }}
        env:
          CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER: aarch64-apple-darwin-gcc

      - name: Prepare Asset
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.platform.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.platform.os == 'windows-latest' && '.exe' || '' }} \
             release/${{ steps.binary.outputs.name }}

      # Create checksum
      - name: Generate SHA-256
        run: |
          cd release
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ steps.binary.outputs.name }} SHA256 | grep -v "hash" > ${{ steps.binary.outputs.name }}.sha256
          else
            shasum -a 256 ${{ steps.binary.outputs.name }} > ${{ steps.binary.outputs.name }}.sha256
          fi

      # Sign the artifacts
      - name: Sign artifacts
        env:
          SSH_KEY: ${{ secrets.SSH_SIGNING_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_signing
          chmod 600 ~/.ssh/id_signing
          cd release
          ssh-keygen -Y sign -f ~/.ssh/id_signing -n file "${{ steps.binary.outputs.name }}"
          rm ~/.ssh/id_signing

      # Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "zParse ${{ github.ref_name }}"
          files: |
            release/${{ steps.binary.outputs.name }}
            release/${{ steps.binary.outputs.name }}.sha256
            release/${{ steps.binary.outputs.name }}.sig
          body: ${{ steps.release-notes.outputs.NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
